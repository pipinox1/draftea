// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/draftea/payment-system/payments-service/domain"
	mock "github.com/stretchr/testify/mock"

	models "github.com/draftea/payment-system/shared/models"
)

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

type MockPaymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentRepository) EXPECT() *MockPaymentRepository_Expecter {
	return &MockPaymentRepository_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockPaymentRepository) FindByID(ctx context.Context, id models.ID) (*domain.Payment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) (*domain.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) *domain.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockPaymentRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.ID
func (_e *MockPaymentRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockPaymentRepository_FindByID_Call {
	return &MockPaymentRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockPaymentRepository_FindByID_Call) Run(run func(ctx context.Context, id models.ID)) *MockPaymentRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ID))
	})
	return _c
}

func (_c *MockPaymentRepository_FindByID_Call) Return(_a0 *domain.Payment, _a1 error) *MockPaymentRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentRepository_FindByID_Call) RunAndReturn(run func(context.Context, models.ID) (*domain.Payment, error)) *MockPaymentRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *MockPaymentRepository) FindByUserID(ctx context.Context, userID models.ID) ([]*domain.Payment, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []*domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) ([]*domain.Payment, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ID) []*domain.Payment); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentRepository_FindByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserID'
type MockPaymentRepository_FindByUserID_Call struct {
	*mock.Call
}

// FindByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID models.ID
func (_e *MockPaymentRepository_Expecter) FindByUserID(ctx interface{}, userID interface{}) *MockPaymentRepository_FindByUserID_Call {
	return &MockPaymentRepository_FindByUserID_Call{Call: _e.mock.On("FindByUserID", ctx, userID)}
}

func (_c *MockPaymentRepository_FindByUserID_Call) Run(run func(ctx context.Context, userID models.ID)) *MockPaymentRepository_FindByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ID))
	})
	return _c
}

func (_c *MockPaymentRepository_FindByUserID_Call) Return(_a0 []*domain.Payment, _a1 error) *MockPaymentRepository_FindByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentRepository_FindByUserID_Call) RunAndReturn(run func(context.Context, models.ID) ([]*domain.Payment, error)) *MockPaymentRepository_FindByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, payment
func (_m *MockPaymentRepository) Save(ctx context.Context, payment *domain.Payment) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockPaymentRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - payment *domain.Payment
func (_e *MockPaymentRepository_Expecter) Save(ctx interface{}, payment interface{}) *MockPaymentRepository_Save_Call {
	return &MockPaymentRepository_Save_Call{Call: _e.mock.On("Save", ctx, payment)}
}

func (_c *MockPaymentRepository_Save_Call) Run(run func(ctx context.Context, payment *domain.Payment)) *MockPaymentRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Payment))
	})
	return _c
}

func (_c *MockPaymentRepository_Save_Call) Return(_a0 error) *MockPaymentRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentRepository_Save_Call) RunAndReturn(run func(context.Context, *domain.Payment) error) *MockPaymentRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentRepository creates a new instance of MockPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentRepository {
	mock := &MockPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
