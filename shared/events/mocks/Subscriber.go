// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	events "github.com/draftea/payment-system/shared/events"
	mock "github.com/stretchr/testify/mock"
)

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

type MockSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriber) EXPECT() *MockSubscriber_Expecter {
	return &MockSubscriber_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: ctx, eventType, handler
func (_m *MockSubscriber) Subscribe(ctx context.Context, eventType string, handler events.EventHandler) error {
	ret := _m.Called(ctx, eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, events.EventHandler) error); ok {
		r0 = rf(ctx, eventType, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockSubscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - eventType string
//   - handler events.EventHandler
func (_e *MockSubscriber_Expecter) Subscribe(ctx interface{}, eventType interface{}, handler interface{}) *MockSubscriber_Subscribe_Call {
	return &MockSubscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, eventType, handler)}
}

func (_c *MockSubscriber_Subscribe_Call) Run(run func(ctx context.Context, eventType string, handler events.EventHandler)) *MockSubscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(events.EventHandler))
	})
	return _c
}

func (_c *MockSubscriber_Subscribe_Call) Return(_a0 error) *MockSubscriber_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriber_Subscribe_Call) RunAndReturn(run func(context.Context, string, events.EventHandler) error) *MockSubscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
